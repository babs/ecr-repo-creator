spec:
  inputs:
    runner_tags:
      default: shared-services
    stage:
      default: build
    job_name:
      type: string
      default: build oci image
    dockerfile_name:
      type: string
      default: Dockerfile
    context_subdir:
      type: string
      default: ""
    tag_template:
      type: string
      default: ${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}
    dependencies:
      type: array
      default: []
    needs:
      type: array
      default: []
    cache:
      default: "false"
      options:
        - "true"
        - "false"
    single_snapshot:
      default: "false"
      options:
        - "true"
        - "false"
    use_new_run:
      default: "true"
      options:
        - "true"
        - "false"
    parallel_matrix:
      type: array
      default: [{"default_for_single_job":["🛠️"]}]
    rules:
      type: array
      default:
        # Semver build part not tolerated in OCI images tags so +xxxx is excluded
        - if: $CI_COMMIT_TAG =~ /^v?\d+\.\d+\.\d+(-[0-9A-Za-z.-]+)?$/
          when: on_success
        - if: $CI_COMMIT_BRANCH == "develop"
          when: on_success
        - if: $CI_PIPELINE_SOURCE == "web"
          when: always
        - if: $CI_PIPELINE_SOURCE == "api"
          when: always
        - if: $CI_PIPELINE_SOURCE == "trigger"
          when: always
        # To be discussed later
        #- if: $CI_PIPELINE_SOURCE == "schedule"
        #  when: always
    cache_copy_layers:
      default: "true"
      options:
        - "true"
        - "false"
    cache_run_layers:
      default: "true"
      options:
        - "true"
        - "false"
    env_var_prefix:
      default: "OCI_BUILD"
    before_script:
      type: array
      default: []
    after_script:
      type: array
      default: []
    build_args:
      type: array
      default: []
    build_args_w_subst:
      type: array
      default: []
---

variables:
  $[[ inputs.env_var_prefix ]]_FORCE_TAG:
    description: "Force image tag instead of the generated one"
  $[[ inputs.env_var_prefix ]]_ADDITIONNAL_TAGS:
    description: "Other tags to tag the image with (space separated)"
  $[[ inputs.env_var_prefix ]]_KANIKO_ENABLE_CACHE:
    value: "default"
    options:
      - "default"
      - "true"
      - "false"
    description: "Override Kaniko cache flag"
  $[[ inputs.env_var_prefix ]]_SEMVER_MULTITAG:
    value: "true"
    options:
      - "true"
      - "false"
    description: "If semver, decline tag version into multiple tags"
  $[[ inputs.env_var_prefix ]]_SEMVER_MULTITAG_INC_REL:
    value: "true"
    options:
      - "true"
      - "false"
    description: "If semver tag is declined, keep the release"

$[[ inputs.job_name ]]:
  stage: $[[ inputs.stage ]]
  image:
      name: beardedbabs/kaniko-w-ecr-repo-creator:latest
      entrypoint: [""]
  tags:
    - $[[ inputs.runner_tags ]]
  rules:
    - $[[ inputs.rules ]]
  needs:
    - $[[ inputs.needs ]]
  dependencies:
    - $[[ inputs.dependencies ]]
  parallel:
    matrix:
      - $[[ inputs.parallel_matrix ]]
  before_script:
    - $[[ inputs.before_script ]]

  script:
    - |-
      # Script setup
      set -eu

      function error_banner () {
        local MSG="$1"
        MSG_MAX_LEN=$(echo -e "$MSG" | wc -L)
        SEPARATOR="$(printf -- "=%.s" $(seq 1 $(($MSG_MAX_LEN+4))))"
        echo -e "\e[1;41;37m${SEPARATOR}\e[0m"
        echo -e "$MSG" | while read LINE; do
          printf "\e[1;41;37m> %-${MSG_MAX_LEN}s <\e[0m\n" "$LINE"
        done
        echo -e "\e[1;41;37m${SEPARATOR}\e[0m"
      }
    - |-
      # Section Variable configuration
      echo -e "\e[0Ksection_start:`date +%s`:var_setup\r\e[0K\e[4m[*] Variable configuration\e[0m"
    - |-
      # Setup environment variables
      ERROR_MSG=""
      [ -z "${ECR_DIST_REPOSITORY_POLICY:-}" ] && ERROR_MSG="$ERROR_MSG\n - missing ECR_DIST_REPOSITORY_POLICY"
      [ -z "${ECR_DIST_CREDS_AWS_ACCESS_KEY_ID:-}" ] && ERROR_MSG="$ERROR_MSG\n - missing ECR_DIST_CREDS_AWS_ACCESS_KEY_ID"
      [ -z "${ECR_DIST_CREDS_AWS_SECRET_ACCESS_KEY:-}" ] && ERROR_MSG="$ERROR_MSG\n - missing ECR_DIST_CREDS_AWS_SECRET_ACCESS_KEY"
      [ -z "${ECR_DIST_REGISTRY:-}" ] && ERROR_MSG="$ERROR_MSG\n - missing ECR_DIST_REGISTRY"
      [ -n "$ERROR_MSG" ] && error_banner "Env var missing, is it running in PROTECTED branch or tag?$ERROR_MSG" && exit 3
      export REPOSITORY_POLICY="${ECR_DIST_REPOSITORY_POLICY}"
      export AWS_ACCESS_KEY_ID="${ECR_DIST_CREDS_AWS_ACCESS_KEY_ID}"
      export AWS_SECRET_ACCESS_KEY="${ECR_DIST_CREDS_AWS_SECRET_ACCESS_KEY}"
      export REGISTRY_HOST="${ECR_DIST_REGISTRY}"

    - |-
      # Define image name and setup docker creds
      IMAGE_NAME=${REGISTRY_HOST}/dist/images/${CI_SERVER_HOST}/${CI_PROJECT_PATH}
      CACHE_REPO=${REGISTRY_HOST}/dist/cache/kaniko/${CI_SERVER_HOST}/${CI_PROJECT_PATH}
      echo "{\"credHelpers\":{\"${REGISTRY_HOST}\":\"ecr-login\"},\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json

    - |-
      # Define tag(s)
      if [ -n "${CI_COMMIT_TAG:-}" ]; then
        IMG_TAGS=${CI_COMMIT_TAG#v}
        if [ "${$[[ inputs.env_var_prefix ]]_SEMVER_MULTITAG}" = "true" -a -n "$(echo $IMG_TAGS | grep -iE '^[0-9]+\.[0-9]+\.[0-9]+(-[a-z0-9.-]+)?$')" ]; then
          RELEASE=""
          case "$IMG_TAGS" in
            *-*)
              RELEASE="-${IMG_TAGS#*-}"
              ;;
          esac
          SEMVER_CORE="${IMG_TAGS%%-*}"
          [ "${$[[ inputs.env_var_prefix ]]_SEMVER_MULTITAG_INC_REL}" = "false" ] && RELEASE=""
          IMG_TAGS="$IMG_TAGS ${SEMVER_CORE%.*}${RELEASE} ${SEMVER_CORE%%.*}${RELEASE}"
        fi
      else
        IMG_TAGS="$[[ inputs.tag_template ]]"
      fi

      [ -n "${$[[ inputs.env_var_prefix ]]_FORCE_TAG:-}" ] && IMG_TAGS="${$[[ inputs.env_var_prefix ]]_FORCE_TAG}"

      for TAG in ${$[[ inputs.env_var_prefix ]]_ADDITIONNAL_TAGS:-}; do IMG_TAGS="$IMG_TAGS ${TAG}"; done

      IMG_TAGS="$(echo "$IMG_TAGS" | envsubst)"

    - |
      # Define the proper Dockerfile
      CONTEXT_SUBDIR="${$[[ inputs.env_var_prefix ]]_CONTEXT_SUBDIR:-$[[ inputs.context_subdir ]]}"
      DOCKERFILE="${CI_PROJECT_DIR}/${CONTEXT_SUBDIR%%/}/${$[[ inputs.env_var_prefix ]]_DOCKERFILE_NAME:-$[[ inputs.dockerfile_name ]]}"
      if [ -n "${COMPONENT:-}" ]; then
        if [ -e "${CI_PROJECT_DIR}/docker/build/${COMPONENT}/Dockerfile" ]; then
          DOCKERFILE="${CI_PROJECT_DIR}/docker/build/${COMPONENT}/Dockerfile"
          IMAGE_NAME="${IMAGE_NAME}/${COMPONENT}"
          CACHE_REPO="${CACHE_REPO}/${COMPONENT}"
        else
          error_banner "component specified but no Dockerfile found at:\n${CI_PROJECT_DIR}/docker/build/${COMPONENT}/Dockerfile"
          exit 1
        fi
      fi

      [ ! -e "$DOCKERFILE" ] && error_banner "No Dockerfile found at:\n$DOCKERFILE" && exit 2

    - |
      # Print essential informations
      [ -n "${COMPONENT:-}" ] && echo "Building component: $COMPONENT"
      echo "Docker file in use: $DOCKERFILE"
      echo "Image will be pushed to: $IMAGE_NAME"
      echo "Image will be tagged as: $(echo $IMG_TAGS | sed -re "s/ +/, /g")"

    - echo -e "\e[0Ksection_end:`date +%s`:var_setup\r\e[0K"


    - |-
      # Section ECR setup
      echo -e "\e[0Ksection_start:`date +%s`:ecr_setup\r\e[0K\e[4m[*] ECR setup\e[0m"
      ecr-repo-creator "${IMAGE_NAME}"

      ENABLE_CACHE=$[[ inputs.cache ]]
      case "${$[[ inputs.env_var_prefix ]]_KANIKO_ENABLE_CACHE:-default}" in
        true)
          ENABLE_CACHE=true
          ;;
        false)
          ENABLE_CACHE=false
          ;;
      esac
      \[ "$ENABLE_CACHE" = "true" ] && LIFECYCLE_POLICY=${ECR_DIST_CACHE_LIFECYCLE_POLICY:-} ecr-repo-creator "$CACHE_REPO"

      echo -e "\e[0Ksection_end:`date +%s`:ecr_setup\r\e[0K"

    - |-
      # Section Image build
      echo -e "\e[0Ksection_start:`date +%s`:build\r\e[0K\e[4m[*] Image build\e[0m"
    - |-
      # Build kaniko args
      KE_ARG_FILE=/tmp-ke-args
      echo --verbosity=${$[[ inputs.env_var_prefix ]]_KANIKO_VERBOSITY:-info} >>$KE_ARG_FILE


      # cache
      echo --cache-repo=${CACHE_REPO} >>$KE_ARG_FILE
      echo --cache=$ENABLE_CACHE >>$KE_ARG_FILE

      # cache-copy-layers
      CACHE_COPY_LAYERS=$[[ inputs.cache_copy_layers ]]
      case "${$[[ inputs.env_var_prefix ]]_KANIKO_SET_CACHE_COPY_LAYERS:-default}" in
        true)
          CACHE_COPY_LAYERS=true
          ;;
        false)
          CACHE_COPY_LAYERS=false
          ;;
      esac
      echo --cache-copy-layers=$CACHE_COPY_LAYERS >>$KE_ARG_FILE

      # cache-run-layers
      CACHE_RUN_LAYERS=$[[ inputs.cache_run_layers ]]
      case "${$[[ inputs.env_var_prefix ]]_KANIKO_SET_CACHE_RUN_LAYERS:-default}" in
        true)
          CACHE_RUN_LAYERS=true
          ;;
        false)
          CACHE_RUN_LAYERS=false
          ;;
      esac
      echo --cache-run-layers=$CACHE_RUN_LAYERS >>$KE_ARG_FILE

      # use-new-run
      USE_NEW_RUN=$[[ inputs.use_new_run ]]
      case "${$[[ inputs.env_var_prefix ]]_KANIKO_SET_USE_NEW_RUN:-default}" in
        true)
          USE_NEW_RUN=true
          ;;
        false)
          USE_NEW_RUN=false
          ;;
      esac
      echo --use-new-run=$USE_NEW_RUN >>$KE_ARG_FILE

      # single-snapshot
      SINGLE_SNAPSHOT=$[[ inputs.single_snapshot ]]
      case "${$[[ inputs.env_var_prefix ]]_KANIKO_SET_SINGLE_SNAPSHOT:-default}" in
        true)
          SINGLE_SNAPSHOT=true
          ;;
        false)
          SINGLE_SNAPSHOT=false
          ;;
      esac
      echo --single-snapshot=$SINGLE_SNAPSHOT >>$KE_ARG_FILE

      echo --image-name-tag-with-digest-file=/dev/termination-log >>$KE_ARG_FILE
      echo --context=${CI_PROJECT_DIR}/${CONTEXT_SUBDIR} >>$KE_ARG_FILE
      echo "--dockerfile=${DOCKERFILE}" >>$KE_ARG_FILE
      for TAG in $IMG_TAGS; do
        echo --destination=$IMAGE_NAME:$TAG >>$KE_ARG_FILE
      done
      echo '$[[ inputs.build_args ]]' | jq -r '.[]|("--build-arg="+.)' >>$KE_ARG_FILE
      echo '$[[ inputs.build_args_w_subst ]]' | jq -r '.[]|("--build-arg="+.)' | envsubst >>$KE_ARG_FILE
      echo --label=CI_COMMIT_REF_NAME=$CI_COMMIT_REF_NAME >>$KE_ARG_FILE
      echo --label=CI_JOB_URL=$CI_JOB_URL >>$KE_ARG_FILE
      echo --label=CI_JOB_STARTED_AT=$CI_JOB_STARTED_AT >>$KE_ARG_FILE
      echo --label=CI_PROJECT_URL=$CI_PROJECT_URL >>$KE_ARG_FILE

      if [ "${$[[ inputs.env_var_prefix ]]_KANIKO_SHOW_FLAGS:-false}" = true ]; then
        echo "********** Kaniko args **********"
        cat $KE_ARG_FILE
        echo "********** /Kaniko args **********"
      fi

    - tr $"\n" $"\0" <$KE_ARG_FILE | xargs -0 /kaniko/executor
    - echo -e "\e[0Ksection_end:`date +%s`:build\r\e[0K"

  after_script:
    - $[[ inputs.after_script ]]

